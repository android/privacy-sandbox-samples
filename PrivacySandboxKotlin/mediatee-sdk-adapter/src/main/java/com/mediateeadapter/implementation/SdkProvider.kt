/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mediateeadapter.implementation

import android.content.Context
import android.os.Bundle
import androidx.privacysandbox.sdkruntime.core.SandboxedSdkCompat
import androidx.privacysandbox.sdkruntime.core.controller.SdkSandboxControllerCompat
import com.example.api.SdkServiceFactory
import com.mediateeadapter.api.AbstractSandboxedSdkProviderCompat
import com.mediateeadapter.api.SdkService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/** Provides an [SdkService] implementation when the SDK is loaded. */
class SdkProvider : AbstractSandboxedSdkProviderCompat() {

    private val mediatorSdkName = "com.example.sdk"
    private val mediateeSdkName = "com.mediatee.sdk"

    private var mediatorInstance: com.example.api.SdkService? = null
    private var mediateeInstance: com.mediatee.api.SdkService? = null

    private val coroutineScope = CoroutineScope(Dispatchers.Main)

    /**
     * Returns the [SdkService] implementation. Called when the SDK is loaded.
     *
     * This method signature (and the [AbstractSandboxedSdkProviderCompat] class) is generated by
     * the Privacy Sandbox API Compiler plugin as the entry point for the app/SDK communication.
     */
    override fun createSdkService(context: Context): SdkService = SdkServiceImpl()

    /**
     * Does the work needed for the SDK to start handling requests. SDK should do any work to be
     * ready to handle upcoming requests.
     *
     * This function is called by the SDK sandbox after it loads the SDK.
     *
     * Mediatee is initialised when Adapter is initialised.
     *
     * For Runtime-enabled Mediatee Adapter, when the adapter is loaded in the Mediator, the
     * [MediateeAdapterInterface] will be registered with the Mediator.
     */
    override fun onLoadSdk(params: Bundle): SandboxedSdkCompat {
        registerWithMediator()
        return super.onLoadSdk(params)
    }

    /** Registers [MediateeAdapterInterface] with the Mediator. */
    private fun registerWithMediator() {
        val controller = SdkSandboxControllerCompat.from(checkNotNull(context))
        var sandboxedSdk: SandboxedSdkCompat? = null
        // Get mediatorSdk from SdkSandboxController#getSandboxedSdks. Since the adapter is
        // loaded from Mediator when Mediator is loaded, Mediator sdk should be present in already
        // loaded sdks.
        for (loadedSandboxedSdk in controller.getSandboxedSdks()) {
            if (loadedSandboxedSdk.getSdkInfo()?.name == mediatorSdkName) {
                sandboxedSdk = loadedSandboxedSdk
                break
            }
        }
        mediatorInstance =
            SdkServiceFactory.wrapToSdkService(checkNotNull(sandboxedSdk?.getInterface()))
        // Load mediatee sdk and register MediateeAdapterInterface with Mediator.
        coroutineScope.launch {
            loadMediateeSdk(checkNotNull(context) { "Mediatee Sdk can't be loaded!" })
            val mediateeAdapterInterfaceImpl = MediateeAdapterInterfaceImpl(
                checkNotNull(context) { "Adapter can't be registered with Mediator!" },
                checkNotNull(mediateeInstance) { "Mediatee Sdk is not loaded!" })
            mediatorInstance?.registerMediateeAdapter(mediateeAdapterInterfaceImpl)
        }
    }

    private suspend fun loadMediateeSdk(context: Context) {
        if (mediateeInstance == null) {
            val controller = SdkSandboxControllerCompat.from(context)
            val sandboxedSdk = controller.loadSdk(mediateeSdkName, Bundle.EMPTY)
            mediateeInstance =
                com.mediatee.api.SdkServiceFactory.wrapToSdkService(checkNotNull(sandboxedSdk.getInterface()))
        }
    }
}
