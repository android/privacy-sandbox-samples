/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.implementation

import android.content.Context
import android.os.Bundle
import androidx.privacysandbox.sdkruntime.core.SandboxedSdkCompat
import androidx.privacysandbox.sdkruntime.core.controller.SdkSandboxControllerCompat
import com.example.api.AbstractSandboxedSdkProviderCompat
import com.example.api.SdkService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/** Provides an [SdkService] implementation when the SDK is loaded. */
class SdkProvider : AbstractSandboxedSdkProviderCompat() {

    private val adapterSdkName = "com.mediateeadapter.sdk"

    private val coroutineScope = CoroutineScope(Dispatchers.Main)

    /**
     * Returns the [SdkService] implementation. Called when the SDK is loaded.
     *
     * This method signature (and the [AbstractSandboxedSdkProviderCompat] class) is generated by
     * the Privacy Sandbox API Compiler plugin as the entry point for the app/SDK communication.
     */
    override fun createSdkService(context: Context): SdkService = SdkServiceImpl(context)

    /**
     * Does the work needed for the SDK to start handling requests. SDK should do any work to be
     * ready to handle upcoming requests.
     *
     * This function is called by the SDK sandbox after it loads the SDK.
     *
     * Mediator initialises the Runtime-enabled adapters in its own initialisation call.
     */
    override fun onLoadSdk(params: Bundle): SandboxedSdkCompat {
        coroutineScope.launch {
            initialiseAdapters()
        }
        return super.onLoadSdk(params)
    }

    private suspend fun initialiseAdapters() {
        SdkSandboxControllerCompat.from(checkNotNull(context) { "Cannot initialise adapters!" })
            .loadSdk(adapterSdkName, Bundle.EMPTY)
    }
}
